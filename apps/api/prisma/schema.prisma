// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  password  String
  role      Role      @default(user)
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Hotel {
  id        Int      @id @default(autoincrement())
  name      String
  geoHash   String
  city      String
  stars     Int
  rooms     Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id           Int            @id @default(autoincrement())
  hotel        Hotel          @relation(fields: [hotelId], references: [id])
  hotelId      Int
  roomType     String
  basePrice    Float
  maxGuests    Int
  availability Availability[]
  bookings     Booking[]
}

model Availability {
  id             Int      @id @default(autoincrement())
  room           Room     @relation(fields: [roomId], references: [id])
  roomId         Int
  date           DateTime
  availableCount Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([roomId, date]) // ensures no duplicate availability entry per day
}

model Booking {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  room      Room          @relation(fields: [roomId], references: [id])
  roomId    Int
  checkin   DateTime
  checkout  DateTime
  status    BookingStatus @default(PENDING)
  price     Float
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
}

enum Role {
  user
  admin
}
